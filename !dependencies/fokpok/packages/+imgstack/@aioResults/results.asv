classdef results
    %RESULTS Summary of this class goes here
    %   Detailed explanation goes here
    
    properties
        % must be set @ initialization
        wavelength          (1,1) double
        pixelpitch          (1,1) double
        zPos                (1,:) double % z-positions of caustic
        
        % general, updated continously
        uuid                (:,1) cell
        time                (:,1) double
        MsquaredEffective   (:,1) double
        delta_z0_xy         (:,1) double
        
        % xData, Table1
        z0x                 (:,1) double
        zRx                 (:,1) double
        d0x                 (:,1) double
        divergenceX         (:,1) double
        MsquaredX           (:,1) double
        RsquaredFitX        (:,1) double
        MeasCountsXa        (:,1) uint32
        MeasCountsXb        (:,1) uint32
        
        % yData, Table1
        z0y                 (:,1) double
        zRy                 (:,1) double
        d0y                 (:,1) double
        divergenceY         (:,1) double
        MsquaredY           (:,1) double
        RsquaredFitY        (:,1) double
        MeasCountsYa        (:,1) uint32
        MeasCountsYb        (:,1) uint32
        
        % data Table2
        theta               (:,:) double % [Time,zPos]
        dx                  (:,:) double % [Time,zPos]
        dy                  (:,:) double % [Time,zPos]
    end
    
    properties (SetAccess = protected, GetAccess = public)
        idx                  (1,1) uint32
        initialHeight        (1,1) uint32
        growHeight           (1,1) uint32 % if arrays are full, extend arrays by growHeight
    end
    
    properties (Dependent, SetAccess = protected, GetAccess = public)
        width                (1,1) uint32
        currentHeight        (1,1) uint32 % used to determine whether preallocated arrays must be dynamically grown
    end
    
    methods
        function obj = results(wavelength,pixelpitch,zPos)
            obj.idx = 1;
            obj.initialHeight = 10;
            obj.currentHeight = height;
            obj.growHeight = 1e4;
            obj.wavelength = wavelength;
            obj.pixelpitch = pixelpitch;
            obj.zPos = zPos;
            
            obj = obj.preallocate();
        end
        
        function val = get.currentHeight(obj)
            val = length(obj.uuid);
        end
        
        function val = get.width(obj)
           val = length(obj.zPos); 
        end
    end
    
    methods (Access = public)
        
        function obj = record(obj,imstack)
            
            if obj.idx > obj.currentHeight
               obj = obj.extendArrays();
                disp('too much')
               return
            end
            
            % general
            obj.uuid{obj.idx} = imstack.uuid;
            obj.time(obj.idx) = imstack.time;
            obj.MsquaredEffective(obj.idx) = imstack.results.msquared_effective;
            obj.delta_z0_xy(obj.idx) = imstack.results.deltaz_xy;
            
            % xData, Table1            
            if ~imstack.results.x.badFit
                obj.z0x(obj.idx) = imstack.results.x.z0;
                obj.zRx(obj.idx) = imstack.results.x.zR;
                obj.d0x(obj.idx) = imstack.results.x.d0;
                obj.divergenceX(obj.idx) = imstack.results.x.divergence;
                obj.MsquaredX(obj.idx) = imstack.results.x.msquared;
                obj.RsquaredFitX(obj.idx) = imstack.results.x.rsquared(2);
                obj.MeasCountsXa(obj.idx) = imstack.results.x.counts(1);
                obj.MeasCountsXb(obj.idx) = imstack.results.x.counts(2);
            end
            % yData, Table1
            if ~imstack.results.y.badFit
                obj.z0y(obj.idx) = imstack.results.y.z0;
                obj.zRy(obj.idx) = imstack.results.y.zR;
                obj.d0y(obj.idx) = imstack.results.y.d0;
                obj.divergenceY(obj.idx) = imstack.results.y.divergence;
                obj.MsquaredY(obj.idx) = imstack.results.y.msquared;
                obj.RsquaredFitY(obj.idx) = imstack.results.y.rsquared(2);
                obj.MeasCountsYa(obj.idx) = imstack.results.y.counts(1);
                obj.MeasCountsYb(obj.idx) = imstack.results.y.counts(2);
            end
            % data Table2
            obj.theta(obj.idx,:) = imstack.moments.denoised.theta;
            obj.dx(obj.idx,:) = imstack.results.dx;
            obj.dy(obj.idx,:) = imstack.results.dy;
            
            obj.idx = obj.idx+1;
        end
        
    end
    
    
    methods (Access = private)
        
        function obj = preallocate(obj)
            % general, updated continously
            obj.uuid = cell(obj.initialHeight,1);
            obj.time = nan(obj.initialHeight,1);
            obj.MsquaredEffective = nan(obj.initialHeight,1);
            obj.delta_z0_xy = nan(obj.initialHeight,1);
            % xData, Table1
            obj.z0x = nan(obj.initialHeight,1);
            obj.zRx = nan(obj.initialHeight,1);
            obj.d0x = nan(obj.initialHeight,1);
            obj.divergenceX = nan(obj.initialHeight,1);
            obj.MsquaredX = nan(obj.initialHeight,1);
            obj.RsquaredFitX = nan(obj.initialHeight,1);
            obj.MeasCountsXa = nan(obj.initialHeight,1);
            obj.MeasCountsXb = nan(obj.initialHeight,1);
            % yData, Table1
            obj.z0y = nan(obj.initialHeight,1);
            obj.zRy = nan(obj.initialHeight,1);
            obj.d0y = nan(obj.initialHeight,1);
            obj.divergenceY = nan(obj.initialHeight,1);
            obj.MsquaredY = nan(obj.initialHeight,1);
            obj.RsquaredFitY = nan(obj.initialHeight,1);
            obj.MeasCountsYa = nan(obj.initialHeight,1);
            obj.MeasCountsYb = nan(obj.initialHeight,1);
            % data Table2
            obj.theta = nan(obj.initialHeight,obj.width);
            obj.dx = nan(obj.initialHeight,width);
            obj.dy = nan(obj.initialHeight,width);
        end
        
        function obj = extendArrays(obj)
            obj.growHeight
            
            % general, updated continously
            obj.uuid = [obj.uuid; cell(obj.growHeight,1)];
            obj.time = nan(obj.growHeight,1);
            obj.MsquaredEffective = nan(obj.growHeight,1);
            obj.delta_z0_xy = nan(obj.growHeight,1);
            % xData, Table1
            obj.z0x = nan(obj.growHeight,1);
            obj.zRx = nan(obj.growHeight,1);
            obj.d0x = nan(obj.growHeight,1);
            obj.divergenceX = nan(obj.growHeight,1);
            obj.MsquaredX = nan(obj.growHeight,1);
            obj.RsquaredFitX = nan(obj.growHeight,1);
            obj.MeasCountsXa = nan(obj.growHeight,1);
            obj.MeasCountsXb = nan(obj.growHeight,1);
            % yData, Table1
            obj.z0y = nan(obj.growHeight,1);
            obj.zRy = nan(obj.growHeight,1);
            obj.d0y = nan(obj.growHeight,1);
            obj.divergenceY = nan(obj.growHeight,1);
            obj.MsquaredY = nan(obj.growHeight,1);
            obj.RsquaredFitY = nan(obj.growHeight,1);
            obj.MeasCountsYa = nan(obj.growHeight,1);
            obj.MeasCountsYb = nan(obj.growHeight,1);
            % data Table2
            obj.theta = nan(obj.growHeight,width);
            obj.dx = nan(obj.growHeight,width);
            obj.dy = nan(obj.growHeight,width);
            
            
            
            
            
            
            
            
            
            
        end
        
    end
    
    
    
end


